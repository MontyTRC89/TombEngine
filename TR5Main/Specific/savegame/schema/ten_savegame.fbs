include "ten_itemdata.fbs";
namespace TEN.Save;
struct RoomVector {
    room: uint32;
    y_location: uint32;
}

table Item {
    floor: int;
    touch_bits: int32;
    mesh_bits: int32;
    object_id: int32;
    active_state: int32;
    target_state: int32;
    required_state: int32;
    anim_number: int32;
    frame_number: int32;
    room_number: int32;
    velocity: int32;
    vertical_velocity: int32;
    hit_points: int32;
    box_number: int32;
    timer: int32;
    flags: int32;
    trigger_flags: int32;
    carried_item: int32;
    after_death: int32;
    fired_weapon: int32;
    item_flags: [int32];
	position: Position;
	triggered: bool;
	active: bool;
	status: int32;
	airborne: bool;
	hit_stauts: bool;
	collidable: bool;
	looked_at: bool;
	poisoned: bool;
	ai_bits: int32;
	swap_mesh_flags: int32;
    data: TEN.Save.ItemData;
}

table WeaponInfo {
	object_number: uint32;
	anim_number: uint32;
	frame_number: uint32;
	current_anim_state: uint32;
	goal_anim_state: uint32;
}

table HolsterInfo {
	left_holster: int32;
	right_holster: int32;
	back_holster: int32;
}

table AmmoInfo {
	count: int32;
	is_infinite: bool;
}

table CarriedWeaponInfo {
	present: bool;
	ammo: [AmmoInfo];
	selected_ammo: int32;
	has_lasersight: bool;
	has_silencer: bool;
}

table FlareData {
	life: uint32;
	frame: int32;
	control_left: bool;
}

table ArmInfo {
	anim_number: int32;
	frame_number: int32;
	frame_base: int32;
	locked: bool;
	rotation: Vector3;
	flash_gun: int32;
}

table WeaponControlData {
	weapon_item: int32;
	has_fired: bool;
	fired: bool;
	gun_type: int32;
	request_gun_type: int32;
	last_gun_type: int32;
	holster_info: HolsterInfo;
}

table RopeControlData {
	segment: int32;
	direction: int32;
	arc_front: int32;
	arc_back: int32;
	last_x: int32;
	max_x_forward: int32;
	max_x_backward: int32;
	dframe: int32;
	frame: int32;
	frame_rate: int32;
	y: int32;
	ptr: int32;
	offset: int32;
	down_vel: int32;
	flag: int32;
	count: int32;
}

table LaraCountData {
	run_jump: int32;
	position_adjust: int32;
	pose: int32;
	dive: int32;
	death: int32;
}

table TightropeControlData {
	balance: float;
	time_on_tightrope: uint32;
	can_dismount: bool;
	tightrope_item: int32;
}

table LaraControlData {
	move_angle: int32;
	turn_rate: int32;
	calculated_jump_velocity: int32;
	jump_direction: int32;
	hand_status: int32;
	water_status: int32;
	weapon_control: WeaponControlData;
	rope_control: RopeControlData;
	tightrope_control: TightropeControlData;
	can_look: bool;
	is_moving: bool;
	keep_low: bool;
	is_low: bool;
	can_climb_ladder: bool;
	is_climbing_ladder: bool;
	can_monkey_swing: bool;
	run_jump_queued: bool;
	water_current_active: int32;
	locked: bool;
	count: LaraCountData;
	extra_head_rot: Vector3;
	extra_torso_rot: Vector3;
	extra_velocity: Vector3;
	is_busy: bool;
	old_busy: bool;
}

table Lara {
	item_number: int32;
	hit_points: int32;
	velocity: int32;
	vertical_velocity: int32;
	projected_floor_height: int32;
	water_status: int32;
	control: LaraControlData;
	hit_frame: int32;
	hit_direction: int32;
	air: int32;
	sprint_energy: int32;
	spasm_effect_count: int32;
	flare: FlareData;
	burn_type: int32;
	burn: bool;
	burn_blue: int32;
	burn_smoke: bool;
	burn_count: int32;
	poisoned: int32;
	wet: [bool];
	lit_torch: bool;
	water_surface_dist: int32;
	last_position: Vector3;
	next_corner_position: Vector3;
	next_corner_rotation: Vector3;
	mesh_ptrs: [int32];
	target_angles: [int32];
	left_arm: ArmInfo;
	right_arm: ArmInfo;
	interacted_item: int32;
	location: int32;
	highest_location: int32;
	location_pad: int32;
	beetle_life: int32;
	has_beetle_things: int32;
	small_waterskin: int32;
	big_waterskin: int32;
	vehicle: int32;
	extra_anim: int32;
	mine_l: bool;
	mine_r: bool;
	weapons: [CarriedWeaponInfo];
	puzzles: [int32];
	keys: [int32];
	pickups: [int32];
	examines: [int32];
	puzzles_combo: [int32];
	keys_combo: [int32];
	pickups_combo: [int32];
	examines_combo: [int32];
	secrets: int32;
	lasersight: bool;
	crowbar: bool;
	torch: bool;
	silencer: bool;
	binoculars: bool;
	num_large_medipacks: int32;
	num_small_medipacks: int32;
	num_flares: int32;
	target_item_number: int32;
}

table FixedCamera {
	flags: int32;
}

table FlyByCamera {
	flags: int32;
}

table Sink {
	flags: int32;
}

table StaticMeshInfo {
	room_number: int32;
	flags: int32;
}

table RatInfo {
	on: bool;
	x: int32;
	y: int32;
	z: int32;
	x_rot: int32;
	y_rot: int32;
	z_rot: int32;
	room_number: int32;
	flags: int32;
}

table SpiderInfo {
	on: bool;
	x: int32;
	y: int32;
	z: int32;
	x_rot: int32;
	y_rot: int32;
	z_rot: int32;
	room_number: int32;
	flags: int32;
}

table ScarabInfo {
	on: bool;
	x: int32;
	y: int32;
	z: int32;
	x_rot: int32;
	y_rot: int32;
	z_rot: int32;
	room_number: int32;
	flags: int32;
}

table BatInfo {
	on: bool;
	x: int32;
	y: int32;
	z: int32;
	x_rot: int32;
	y_rot: int32;
	z_rot: int32;
	room_number: int32;
	counter: int32;
}

table Rope {
	segments: [Vector3];
	velocities: [Vector3];
	normalised_segments: [Vector3];
	mesh_segments: [Vector3];
	position: Vector3;
	coords: [Vector3];
	segment_length: int32;
	active: int32;
	coiled: int32;
}

table Pendulum {
	position: Vector3;
	velocity: Vector3;
	node: int32;
}

table SaveGameHeader {
	level_name: string;
	days: int32;
	hours: int32;
	minutes: int32;
	seconds: int32;
	level: int32;
	timer: int32;
	count: int32;
}

table SaveGameStatistics {
	ammo_hits: int32;
	ammo_used: int32;
	medipacks_used: int32;
	distance: int32;
	kills: int32;
	secrets: int32;
	timer: int32;
}

table SaveGame {
	header: SaveGameHeader;
	game: SaveGameStatistics;
	level: SaveGameStatistics;
	lara: Lara;
	active_weapon: WeaponInfo;
    items: [Item];
	fixed_cameras: [FixedCamera];
	sinks: [Sink];
	static_meshes: [StaticMeshInfo];
	flyby_cameras: [FlyByCamera];
	rats: [RatInfo];
	spiders: [SpiderInfo];
	scarabs: [ScarabInfo];
	bats: [BatInfo];
	flip_maps: [int32];
	flip_stats: [int32];
	flip_effect: int32;
	flip_timer: int32;
	flip_status: int32;
	ambient_track: string;
	ambient_position: uint64;
	oneshot_track: string;
	oneshot_position: uint64;
	cd_flags: [int32];
	rope: Rope;
	pendulum: Pendulum;
	alternate_pendulum: Pendulum;
}

root_type TEN.Save.SaveGame;