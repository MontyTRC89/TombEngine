include "ten_itemdata.fbs";
namespace TEN.Save;

struct RoomVector {
	room: uint32;
	y_location: uint32;
}

table Room {
	index: int32;
	name: string;
	flags: int32;
	reverb_type: int32;
}

table Item {
	active_state: int32;
	anim_number: int32;
	frame_number: int32;
	is_airborne: bool;
	required_state: int32;
	target_state: int32;
	velocity: Vector3;

	floor: int;
	touch_bits: int32;
	mesh_bits: int32;
	object_id: int32;
	room_number: int32;
	hit_points: int32;
	box_number: int32;
	timer: int32;
	color: Vector4;
	flags: int32;
	trigger_flags: int32;
	carried_item: int32;
	after_death: int32;
	item_flags: [int32];
	pose: Position;
	next_item: int32;
	next_item_active: int32;
	active: bool;
	status: int32;
	hit_stauts: bool;
	collidable: bool;
	looked_at: bool;
	ai_bits: int32;
	data: TEN.Save.ItemData;
	
	base_mesh: int32;
	mesh_pointers: [int32];

	effect_type: int32;
	effect_light_colour: Vector3;
	effect_primary_colour: Vector3;
	effect_secondary_colour: Vector3;
	effect_count: int32;

	lua_name: string;
	lua_on_killed_name: string;
	lua_on_hit_name: string;
	lua_on_collided_with_object_name: string;
	lua_on_collided_with_room_name: string;
}

table FXInfo {
	pose : Position;
	room_number: int32;
	object_number: int32;
	next_fx: int32;
	next_active: int32;
	speed: int32;
	fall_speed: int32;
	frame_number: int32;
	counter : int32;
	color: Vector4;
	flag1: int32;
	flag2: int32;
}

table AmmoInfo {
	count: int32;
	is_infinite: bool;
}

table HolsterInfo {
	left_holster: int32;
	right_holster: int32;
	back_holster: int32;
}

table CarriedWeaponInfo {
	present: bool;
	has_lasersight: bool;
	has_silencer: bool;
	ammo: [AmmoInfo];
	selected_ammo: int32;
	weapon_mode: int32;
}

table WeaponInfo {
	object_number: uint32;
	anim_number: uint32;
	frame_number: uint32;
	active_state: uint32;
	target_state: uint32;
}

table ArmInfo {
	anim_number: int32;
	frame_number: int32;
	frame_base: int32;
	locked: bool;
	rotation: Vector3;
	gun_flash: int32;
	gun_smoke: int32;
}

table FlareData {
	life: uint32;
	frame: int32;
	control_left: bool;
}

enum TorchState:int32 { 
	holding = 0,
	throwing,
	dropping,
	just_lit
}

table TorchData {
	state: TorchState;
	is_lit: bool;
}

table LaraInventoryData {
	is_busy: bool;
	old_busy: bool;
	beetle_life: int32;
	beetle_components: int32;
	small_waterskin: int32;
	big_waterskin: int32;
	has_binoculars: bool;
	has_crowbar: bool;
	has_torch: bool;
	has_lasersight: bool;
	has_silencer: bool;
	total_small_medipacks: int32;
	total_large_medipacks: int32;
	total_flares: int32;
	total_secrets: uint32;
	puzzles: [int32];
	keys: [int32];
	pickups: [int32];
	examines: [int32];
	puzzles_combo: [int32];
	keys_combo: [int32];
	pickups_combo: [int32];
	examines_combo: [int32];
}

table LaraCountData {
	run_jump: uint32;
	position_adjust: uint32;
	pose: uint32;
	death: uint32;
	no_cheat: uint32;
}

table WeaponControlData {
	weapon_item: int32;
	has_fired: bool;
	fired: bool;
	uzi_left: bool;
	uzi_right: bool;
	gun_type: int32;
	request_gun_type: int32;
	last_gun_type: int32;
	holster_info: HolsterInfo;
	num_shots_fired: uint;
	interval: float;
	timer: float;
}

table RopeControlData {
	segment: int32;
	direction: int32;
	arc_front: int32;
	arc_back: int32;
	last_x: int32;
	max_x_forward: int32;
	max_x_backward: int32;
	dframe: int32;
	frame: int32;
	frame_rate: int32;
	y: int32;
	ptr: int32;
	offset: int32;
	down_vel: int32;
	flag: int32;
	count: int32;
}

table TightropeControlData {
	balance: float;
	time_on_tightrope: uint32;
	can_dismount: bool;
	tightrope_item: int32;
}

table SubsuitControlData {
	x_rot: int32;
	d_x_rot: int32;
	velocity: [int32];
	vertical_velocity: int32;
	x_rot_vel: int32;
	hit_count: uint32;
}

table LaraControlData {
	move_angle: int32;
	turn_rate: int32;
	calculated_jump_velocity: int32;
	jump_direction: int32;
	hand_status: int32;
	water_status: int32;
	count: LaraCountData;
	can_look: bool;
	is_moving: bool;
	keep_low: bool;
	is_low: bool;
	can_climb_ladder: bool;
	is_climbing_ladder: bool;
	can_monkey_swing: bool;
	run_jump_queued: bool;
	locked: bool;
	weapon: WeaponControlData;
	rope: RopeControlData;
	tightrope: TightropeControlData;
	subsuit: SubsuitControlData;
}

table PlayerEffectData {
	bubble_nodes: [float];
	drip_nodes: [float];
}

table PlayerStatusData {
	air: int32;
	exposure: int32;
	poison: int32;
	stamina: int32;
}

table Lara {
	effect: PlayerEffectData;
	status: PlayerStatusData;
	item_number: int32;
	control: LaraControlData;
	inventory: LaraInventoryData;
	weapons: [CarriedWeaponInfo];
	flare: FlareData;
	torch: TorchData;
	extra_head_rot: Vector3;
	extra_torso_rot: Vector3;
	water_current_active: int32;
	water_current_pull: Vector3;
	left_arm: ArmInfo;
	right_arm: ArmInfo;
	target_arm_angles: [int32];
	target_entity_number: int32;
	vehicle: int32;
	extra_anim: int32;
	hit_frame: int32;
	hit_direction: int32;
	projected_floor_height: int32;
	target_facing_angle: int32;
	water_surface_dist: int32;
	interacted_item: int32;
	next_corner_pose: Position;
	burn_type: int32;
	burn_count: uint32;
	burn: bool;
	burn_blue: int32;
	burn_smoke: bool;
	location: int32;
	highest_location: int32;
	location_pad: int32;
}

table FixedCamera {
	flags: int32;
}

table FlyByCamera {
	flags: int32;
}

table Sink {
	flags: int32;
}

table StaticMeshInfo {
	number: int32;
	room_number: int32;
	pose: Position;
	scale: float;
	color: Vector4;
	hit_points: int32;
	flags: int32;
}

table ParticleInfo {
	x: int32;
	y: int32;
	z: int32;
	x_vel: int32;
	y_vel: int32;
	z_vel: int32;
	gravity: int32;
	rot_ang: int32;
	flags: int32;
	s_size: float;
	d_size: float;
	size: float;
	friction: int32;
	scalar: int32;
	sprite_index: int32;
	rot_add: int32;
	max_y_vel: int32;
	on: bool;
	s_r: int32;
	s_g: int32;
	s_b: int32;
	d_r: int32;
	d_g: int32;
	d_b: int32;
	r: int32;
	g: int32;
	b: int32;
	col_fade_speed: int32;
	fade_to_black: int32;
	s_life: int32;
	life: int32;
	blend_mode: int32;
	extras: int32;
	dynamic: int32;
	fx_obj: int32;
	room_number: int32;
	node_number: int32;
}

table SwarmObjectInfo {
	on: bool;
	pose: Position;
	room_number: int32;
	flags: int32;
}

table Rope {
	segments: [Vector3];
	velocities: [Vector3];
	normalised_segments: [Vector3];
	mesh_segments: [Vector3];
	position: Vector3;
	coords: [Vector3];
	segment_length: int32;
	active: int32;
	coiled: int32;
}

table Pendulum {
	position: Vector3;
	velocity: Vector3;
	node: int32;
}

table EventSetCallCounters {
	on_enter: int32;
	on_inside: int32;
	on_leave: int32;
}

table VolumeState {
	status: int32;
	activator: int32;
	timestamp: int32;
}

table Volume {
	name: string;
	number: int32;
	room_number: int32;
	enabled: bool;
	position: Vector3;
	rotation: Vector4;
	scale: Vector3;
	queue: [VolumeState];
}

struct KeyValPair {
	key: uint32;
	val: uint32;
}

table ScriptTable {
	keys_vals: [KeyValPair];
}

table stringTable {
	str: string;
}

table doubleTable {
	scalar: double;
}

table boolTable {
	scalar: bool;
}

table vec2Table {
	vec: Vector2;
}

table vec3Table {
	vec: Vector3;
}

table rotationTable {
	vec: Vector3;
}

table colorTable {
	color: uint32;
}

table funcNameTable {
	str: string;
}

union VarUnion {
	str: stringTable,
	tab: ScriptTable,
	num: doubleTable,
	boolean: boolTable,
	vec2: vec2Table,
	vec3: vec3Table,
	rotation: rotationTable,
	color: colorTable,
	funcName: funcNameTable
}

table UnionTable{
	u:VarUnion;
}

table UnionVec {
	members: [UnionTable];
}

table SaveGameHeader {
	level_name: string;
	days: int32;
	hours: int32;
	minutes: int32;
	seconds: int32;
	level: int32;
	timer: int32;
	count: int32;
}

table SaveGameStatistics {
	ammo_hits: int32;
	ammo_used: int32;
	medipacks_used: int32;
	distance: int32;
	kills: int32;
	secrets: int32;
	timer: int32;
}

table SaveGame {
	header: SaveGameHeader;
	game: SaveGameStatistics;
	level: SaveGameStatistics;
	lara: Lara;
	rooms: [Room];
	items: [Item];
	next_item_free: int32;
	next_item_active: int32;
	room_items: [int32];
	fxinfos: [FXInfo];
	next_fx_free: int32;
	next_fx_active: int32;
	fixed_cameras: [FixedCamera];
	sinks: [Sink];
	static_meshes: [StaticMeshInfo];
	flyby_cameras: [FlyByCamera];
	particles: [ParticleInfo];
	rats: [SwarmObjectInfo];
	spiders: [SwarmObjectInfo];
	scarabs: [SwarmObjectInfo];
	bats: [SwarmObjectInfo];
	flip_maps: [int32];
	flip_stats: [int32];
	flip_effect: int32;
	flip_timer: int32;
	flip_status: int32;
	current_fov: int16;
	action_queue: [int32];
	ambient_track: string;
	ambient_position: uint64;
	oneshot_track: string;
	oneshot_position: uint64;
	cd_flags: [int32];
	rope: Rope;
	pendulum: Pendulum;
	alternate_pendulum: Pendulum;
	volumes: [Volume];
	call_counters: [EventSetCallCounters];
	script_vars: UnionVec;
	//at the moment there is no real reason to save the pre_start and
	//post_start callbacks as OnStart will have already be called when a save
	//is loaded, but we'll store them anyway for completeness
	callbacks_pre_start: [string];
	callbacks_post_start: [string];
	callbacks_pre_end: [string];
	callbacks_post_end: [string];
	callbacks_pre_save: [string];
	callbacks_post_save: [string];
	callbacks_pre_load: [string];
	callbacks_post_load: [string];
	callbacks_pre_control: [string];
	callbacks_post_control: [string];
	}

root_type TEN.Save.SaveGame;
