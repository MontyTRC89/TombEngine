#include "framework.h"
#include "Game/GuiObjects.h"

#include "Game/Lara/lara.h"
#include "Game/Lara/lara_helpers.h"
#include "Game/Lara/lara_one_gun.h"
#include "Game/Lara/lara_two_guns.h"
#include "Math/Math.h"

using namespace TEN::Math;

namespace TEN::Gui
{
	/*
	* To add an object to the inventory, introduce entries to the
	* InventoryObjectTypes and InventoryObjectTable arrays at corresponding indices.
	* 
	* NOTE: Also add the object to the proper list construction function.
	* If it's a weapon, add its ammo handling (variables at the beginning of the file).
	* If it's combineable, add necessary data to the CombineTable awway and increment MAX_COMBINES.
	*/

	InventoryObject InventoryObjectTable[INVENTORY_TABLE_SIZE] =
	{
		// Weapons
		{ ID_PISTOLS_ITEM, 6, 0.5f, EulerAngles(ANGLE(244.0f), ANGLE(90.0f), ANGLE(276.0f)), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_PISTOLS, STRING_PISTOLS, NO_JOINT_BITS,  INV_ROT_Y },
		{ ID_PISTOLS_AMMO_ITEM, 4, 0.5f, EulerAngles::Zero, OPT_USE, STRING_PISTOLS_AMMO, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_UZI_ITEM, -4, 0.5f, EulerAngles(ANGLE(135.0f), ANGLE(-90.0f), ANGLE(90.0f)), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_UZI, STRING_UZI , NO_JOINT_BITS, INV_ROT_Y },
		{ ID_UZI_AMMO_ITEM, 5, 0.5f, EulerAngles(ANGLE(29.5f), 0, 0), OPT_USE, STRING_UZI_AMMO, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_SHOTGUN_ITEM, -6, 0.8f, EulerAngles(ANGLE(270.0f), ANGLE(-20.0f), ANGLE(45)), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_SHOTGUN, STRING_SHOTGUN, 1, INV_ROT_Y },
		{ ID_SHOTGUN_AMMO1_ITEM, 0, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_SHOTGUN_AMMO1, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_SHOTGUN_AMMO2_ITEM, 0, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_SHOTGUN_AMMO2, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_REVOLVER_ITEM, 0, 0.5f, EulerAngles(ANGLE(60.0f), ANGLE(-90.0f), ANGLE(85.0f)), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_REVOLVER, STRING_REVOLVER , 1, INV_ROT_Y },
		{ ID_REVOLVER_AMMO_ITEM, 0, 0.5f, EulerAngles(ANGLE(-16.0f), ANGLE(180.0f), 0), OPT_USE, STRING_REVOLVER_AMMO, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_REVOLVER_ITEM, 0, 0.5f, EulerAngles(ANGLE(60.0f), ANGLE(90.0f), ANGLE(85.0f)), OPT_EQUIP | OPT_SEPERABLE | OPT_CHOOSE_AMMO_REVOLVER, STRING_REVOLVER_LASER, 3, INV_ROT_Y },
		{ ID_CROSSBOW_ITEM, 0, 0.5f, EulerAngles(ANGLE(33.0f), ANGLE(-90.0f), 0), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_CROSSBOW, STRING_CROSSBOW, 1, INV_ROT_Y },
		{ ID_CROSSBOW_ITEM, 0, 0.5f, EulerAngles(ANGLE(33.0f), ANGLE(-90.0f), 0), OPT_EQUIP | OPT_SEPERABLE | OPT_CHOOSE_AMMO_CROSSBOW, STRING_CROSSBOW_LASER, 3, INV_ROT_Y },
		{ ID_CROSSBOW_AMMO1_ITEM, 0, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_CROSSBOW_AMMO1, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_CROSSBOW_AMMO2_ITEM, 0, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_CROSSBOW_AMMO2, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_CROSSBOW_AMMO3_ITEM, 0, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_CROSSBOW_AMMO3, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_HK_ITEM, 0, 0.5f, EulerAngles(ANGLE(280.0f), 0, 0), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_HK, STRING_HK, 1, INV_ROT_Y },
		{ ID_HK_ITEM, 0, 0.5f, EulerAngles(ANGLE(280.0f), ANGLE(-45.0f), 0), OPT_EQUIP | OPT_SEPERABLE | OPT_CHOOSE_AMMO_HK, STRING_HK_SILENCED, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_HK_AMMO_ITEM, 3, 0.5f, EulerAngles(0, ANGLE(90.0f), 0), OPT_USE, STRING_HK_AMMO, 2, INV_ROT_Y },
		{ ID_GRENADE_GUN_ITEM, 0, 0.5f, EulerAngles(0, ANGLE(90.0f), ANGLE(65)), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_GRENADEGUN, STRING_GRENADE_LAUNCHER, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_GRENADE_AMMO1_ITEM, 3, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_GRENADE_AMMO1, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_GRENADE_AMMO2_ITEM, 3, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_GRENADE_AMMO2, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_GRENADE_AMMO3_ITEM, 3, 0.5f, EulerAngles(0, ANGLE(-90.0f), 0), OPT_USE, STRING_GRENADE_AMMO3, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_HARPOON_ITEM, 0, 0.5f, EulerAngles(ANGLE(-65.0f), 0, ANGLE(-20.0f)), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_HARPOON, STRING_HARPOON_GUN, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_HARPOON_AMMO_ITEM, 3, 0.5f, EulerAngles(ANGLE(15.0f), 0, 0), OPT_USE, STRING_HARPOON_AMMO, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_ROCKET_LAUNCHER_ITEM, 0, 0.5f, EulerAngles(ANGLE(80.0f), ANGLE(180.0f), 0), OPT_EQUIP | OPT_COMBINABLE | OPT_CHOOSE_AMMO_ROCKET, STRING_ROCKET_LAUNCHER, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_ROCKET_LAUNCHER_AMMO_ITEM, 3, 0.5f, EulerAngles(0, ANGLE(90.0f), ANGLE(15.0f)), OPT_USE, STRING_ROCKET_AMMO, NO_JOINT_BITS, INV_ROT_Y },

		// Miscellaneous
		{ ID_LASERSIGHT_ITEM, 2, 0.5f, EulerAngles(ANGLE(10.0f), ANGLE(90.0f), 0), OPT_USE | OPT_COMBINABLE, STRING_LASERSIGHT, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_SILENCER_ITEM, 1, 0.5f, EulerAngles(ANGLE(10.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_SILENCER, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_BIGMEDI_ITEM, 2, 0.7f, EulerAngles(0, ANGLE(180.0f), 0), OPT_USE, STRING_LARGE_MEDIPACK, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_SMALLMEDI_ITEM, 0, 0.7f, EulerAngles(ANGLE(112.0f), ANGLE(180.0f), 0), OPT_USE, STRING_SMALL_MEDIPACK, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_BINOCULARS_ITEM, -1, 0.5f, EulerAngles(ANGLE(10.0f), ANGLE(180.0f), 0), OPT_USE, STRING_BINOCULARS, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_FLARE_INV_ITEM, 52, 0.8f, EulerAngles::Zero, OPT_USE, STRING_FLARES, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_TIMEX_ITEM, 2, 0.4f, EulerAngles::Zero, OPT_STATS, STRING_TIMEX, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PC_LOAD_INV_ITEM, 52, 0.3f, EulerAngles(0, ANGLE(180.0f), 0), OPT_LOAD, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PC_SAVE_INV_ITEM, 52, 0.3f, EulerAngles(0, ANGLE(180.0f), 0), OPT_SAVE, STRING_SAVE_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_BURNING_TORCH_ITEM, 14, 0.5f, EulerAngles(ANGLE(90.0f), 0, 0), OPT_USE, STRING_TORCH, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_CROWBAR_ITEM, 4, 0.5f, EulerAngles(ANGLE(90.0f), 0, 0), OPT_USE, STRING_CROWBAR, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_DIARY_ITEM, 0, 0.3f, EulerAngles(0, ANGLE(180.0f), 0), OPT_DIARY, STRING_DIARY, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_COMPASS_ITEM, -14, 0.5f, EulerAngles::Zero, 0, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_CLOCKWORK_BEETLE, 14, 0.5f, EulerAngles::Zero, OPT_USE, STRING_CLOCKWORK_BEETLE, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_CLOCKWORK_BEETLE_COMBO1, 18, 0.5f, EulerAngles::Zero, OPT_COMBINABLE, STRING_CLOCKWORK_BEETLE_COMBO1, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_CLOCKWORK_BEETLE_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_COMBINABLE, STRING_CLOCKWORK_BEETLE_COMBO2, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN1_EMPTY, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_SMALL_EMPTY, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN1_1, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_SMALL_1, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN1_2, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_SMALL_2, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN1_3, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_SMALL_3, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN2_EMPTY, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_LARGE_EMPTY, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN2_1, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_LARGE_1, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN2_2, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_LARGE_2, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN2_3, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_LARGE_3, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN2_4, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_LARGE_4, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_WATERSKIN2_5, 2, 0.5f, EulerAngles(ANGLE(285.0f), 0, 0), OPT_USE | OPT_COMBINABLE, STRING_WATERSKIN_LARGE_5, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_DIARY_OPEN, 0, 0.9f, EulerAngles(0, ANGLE(90.0f), 0), 0, 0, 0},

		// Puzzles
		{ ID_PUZZLE_ITEM1, 14, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM2, 14, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM3, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM4, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM5, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM6, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM7, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM8, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM9, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM10, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM11, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM12, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM13, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM14, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM15, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM16, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Puzzle combos
		{ ID_PUZZLE_ITEM1_COMBO1, 18, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM1_COMBO2, 18, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM2_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM2_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM3_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM3_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM4_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM4_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM5_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM5_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM6_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM6_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM7_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM7_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM8_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM8_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM9_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM9_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM10_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM10_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM11_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM11_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM12_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM12_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM13_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM13_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM14_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM14_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM15_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM15_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM16_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PUZZLE_ITEM16_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Keys
		{ ID_KEY_ITEM1, 14, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM2, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM3, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM4, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM5, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM6, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM7, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM8, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM9, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM10, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM11, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM12, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM13, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM14, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM15, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM16, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Key combos
		{ ID_KEY_ITEM1_COMBO1, 18, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM1_COMBO2, 18, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM2_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM2_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM3_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM3_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM4_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM4_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM5_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM5_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM6_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM6_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM7_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM7_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM8_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM8_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM9_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM9_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM10_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM10_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM11_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM11_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM12_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM12_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM13_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM13_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM14_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM14_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM15_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM15_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM16_COMBO1, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_KEY_ITEM16_COMBO2, 8, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Pickups
		{ ID_PICKUP_ITEM1, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM2, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM3, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM4, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM5, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM6, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM7, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM8, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM9, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM10, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM11, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM12, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM13, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM14, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM15, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM16, 8, 0.5f, EulerAngles::Zero, OPT_USE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Pickup combos
		{ ID_PICKUP_ITEM1_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM1_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM2_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM2_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM3_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM3_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM4_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM4_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM5_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM5_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM6_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM6_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM7_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM7_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM8_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM8_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM9_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM9_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM10_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM10_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM11_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM11_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM12_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM12_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM13_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM13_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM14_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM14_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM15_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM15_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM16_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_PICKUP_ITEM16_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Examines
		{ ID_EXAMINE1, 4, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE2, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE3, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE4, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE5, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE6, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE7, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE8, 14, 0.5f, EulerAngles::Zero, OPT_EXAMINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },

		// Examines combos
		{ ID_EXAMINE1_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE1_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE2_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE2_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE3_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE3_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE4_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE4_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE5_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE5_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE6_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE6_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE7_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE7_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE8_COMBO1, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
		{ ID_EXAMINE8_COMBO2, 14, 0.5f, EulerAngles::Zero, OPT_USE | OPT_COMBINABLE, STRING_LOAD_GAME, NO_JOINT_BITS, INV_ROT_Y },
	};

	CombineList CombineTable[MAX_COMBINES] =
	{
		{ CombineRevolverLasersight, INV_OBJECT_REVOLVER, INV_OBJECT_LASERSIGHT, INV_OBJECT_REVOLVER_LASER },
		{ CombineCrossbowLasersight, INV_OBJECT_CROSSBOW, INV_OBJECT_LASERSIGHT, INV_OBJECT_CROSSBOW_LASER },
		{ CombineHKSilencer, INV_OBJECT_HK, INV_OBJECT_SILENCER, INV_OBJECT_HK_SILENCER },
		{ CombinePuzzleItem1, INV_OBJECT_PUZZLE1_COMBO1, INV_OBJECT_PUZZLE1_COMBO2, INV_OBJECT_PUZZLE1 },
		{ CombinePuzzleItem2, INV_OBJECT_PUZZLE2_COMBO1, INV_OBJECT_PUZZLE2_COMBO2, INV_OBJECT_PUZZLE2 },
		{ CombinePuzzleItem3, INV_OBJECT_PUZZLE3_COMBO1, INV_OBJECT_PUZZLE3_COMBO2, INV_OBJECT_PUZZLE3 },
		{ CombinePuzzleItem4, INV_OBJECT_PUZZLE4_COMBO1, INV_OBJECT_PUZZLE4_COMBO2, INV_OBJECT_PUZZLE4 },
		{ CombinePuzzleItem5, INV_OBJECT_PUZZLE5_COMBO1, INV_OBJECT_PUZZLE5_COMBO2, INV_OBJECT_PUZZLE5 },
		{ CombinePuzzleItem6, INV_OBJECT_PUZZLE6_COMBO1, INV_OBJECT_PUZZLE6_COMBO2, INV_OBJECT_PUZZLE6 },
		{ CombinePuzzleItem7, INV_OBJECT_PUZZLE7_COMBO1, INV_OBJECT_PUZZLE7_COMBO2, INV_OBJECT_PUZZLE7 },
		{ CombinePuzzleItem8, INV_OBJECT_PUZZLE8_COMBO1, INV_OBJECT_PUZZLE8_COMBO2, INV_OBJECT_PUZZLE8 },
		{ CombinePuzzleItem9, INV_OBJECT_PUZZLE9_COMBO1, INV_OBJECT_PUZZLE9_COMBO2, INV_OBJECT_PUZZLE9 },
		{ CombinePuzzleItem10, INV_OBJECT_PUZZLE10_COMBO1, INV_OBJECT_PUZZLE10_COMBO2, INV_OBJECT_PUZZLE10 },
		{ CombinePuzzleItem11, INV_OBJECT_PUZZLE11_COMBO1, INV_OBJECT_PUZZLE11_COMBO2, INV_OBJECT_PUZZLE11 },
		{ CombinePuzzleItem12, INV_OBJECT_PUZZLE12_COMBO1, INV_OBJECT_PUZZLE12_COMBO2, INV_OBJECT_PUZZLE12 },
		{ CombinePuzzleItem13, INV_OBJECT_PUZZLE13_COMBO1, INV_OBJECT_PUZZLE13_COMBO2, INV_OBJECT_PUZZLE13 },
		{ CombinePuzzleItem14, INV_OBJECT_PUZZLE14_COMBO1, INV_OBJECT_PUZZLE14_COMBO2, INV_OBJECT_PUZZLE14 },
		{ CombinePuzzleItem15, INV_OBJECT_PUZZLE15_COMBO1, INV_OBJECT_PUZZLE15_COMBO2, INV_OBJECT_PUZZLE15 },
		{ CombinePuzzleItem16, INV_OBJECT_PUZZLE16_COMBO1, INV_OBJECT_PUZZLE16_COMBO2, INV_OBJECT_PUZZLE16 },
		{ CombineKeyItem1, INV_OBJECT_KEY1_COMBO1, INV_OBJECT_KEY1_COMBO2, INV_OBJECT_KEY1 },
		{ CombineKeyItem2, INV_OBJECT_KEY2_COMBO1, INV_OBJECT_KEY2_COMBO2, INV_OBJECT_KEY2 },
		{ CombineKeyItem3, INV_OBJECT_KEY3_COMBO1, INV_OBJECT_KEY3_COMBO2, INV_OBJECT_KEY3 },
		{ CombineKeyItem4, INV_OBJECT_KEY4_COMBO1, INV_OBJECT_KEY4_COMBO2, INV_OBJECT_KEY4 },
		{ CombineKeyItem5, INV_OBJECT_KEY5_COMBO1, INV_OBJECT_KEY5_COMBO2, INV_OBJECT_KEY5 },
		{ CombineKeyItem6, INV_OBJECT_KEY6_COMBO1, INV_OBJECT_KEY6_COMBO2, INV_OBJECT_KEY6 },
		{ CombineKeyItem7, INV_OBJECT_KEY7_COMBO1, INV_OBJECT_KEY7_COMBO2, INV_OBJECT_KEY7 },
		{ CombineKeyItem8, INV_OBJECT_KEY8_COMBO1, INV_OBJECT_KEY8_COMBO2, INV_OBJECT_KEY8 },
		{ CombineKeyItem9, INV_OBJECT_KEY9_COMBO1, INV_OBJECT_KEY9_COMBO2, INV_OBJECT_KEY9 },
		{ CombineKeyItem10, INV_OBJECT_KEY10_COMBO1, INV_OBJECT_KEY10_COMBO2, INV_OBJECT_KEY10 },
		{ CombineKeyItem11, INV_OBJECT_KEY11_COMBO1, INV_OBJECT_KEY11_COMBO2, INV_OBJECT_KEY11 },
		{ CombineKeyItem12, INV_OBJECT_KEY12_COMBO1, INV_OBJECT_KEY12_COMBO2, INV_OBJECT_KEY12 },
		{ CombineKeyItem13, INV_OBJECT_KEY13_COMBO1, INV_OBJECT_KEY13_COMBO2, INV_OBJECT_KEY13 },
		{ CombineKeyItem14, INV_OBJECT_KEY14_COMBO1, INV_OBJECT_KEY14_COMBO2, INV_OBJECT_KEY14 },
		{ CombineKeyItem15, INV_OBJECT_KEY15_COMBO1, INV_OBJECT_KEY15_COMBO2, INV_OBJECT_KEY15 },
		{ CombineKeyItem16, INV_OBJECT_KEY16_COMBO1, INV_OBJECT_KEY16_COMBO2, INV_OBJECT_KEY16 },
		{ CombinePickupItem1, INV_OBJECT_PICKUP1_COMBO1, INV_OBJECT_PICKUP1_COMBO2, INV_OBJECT_PICKUP1 },
		{ CombinePickupItem2, INV_OBJECT_PICKUP2_COMBO1, INV_OBJECT_PICKUP2_COMBO2, INV_OBJECT_PICKUP2 },
		{ CombinePickupItem3, INV_OBJECT_PICKUP3_COMBO1, INV_OBJECT_PICKUP3_COMBO2, INV_OBJECT_PICKUP3 },
		{ CombinePickupItem4, INV_OBJECT_PICKUP4_COMBO1, INV_OBJECT_PICKUP4_COMBO2, INV_OBJECT_PICKUP4 },
		{ CombinePickupItem5, INV_OBJECT_PICKUP5_COMBO1, INV_OBJECT_PICKUP5_COMBO2, INV_OBJECT_PICKUP5 },
		{ CombinePickupItem6, INV_OBJECT_PICKUP6_COMBO1, INV_OBJECT_PICKUP6_COMBO2, INV_OBJECT_PICKUP6 },
		{ CombinePickupItem7, INV_OBJECT_PICKUP7_COMBO1, INV_OBJECT_PICKUP7_COMBO2, INV_OBJECT_PICKUP7 },
		{ CombinePickupItem8, INV_OBJECT_PICKUP8_COMBO1, INV_OBJECT_PICKUP8_COMBO2, INV_OBJECT_PICKUP8 },
		{ CombinePickupItem9, INV_OBJECT_PICKUP9_COMBO1, INV_OBJECT_PICKUP9_COMBO2, INV_OBJECT_PICKUP9 },
		{ CombinePickupItem10, INV_OBJECT_PICKUP10_COMBO1, INV_OBJECT_PICKUP10_COMBO2, INV_OBJECT_PICKUP10 },
		{ CombinePickupItem11, INV_OBJECT_PICKUP11_COMBO1, INV_OBJECT_PICKUP11_COMBO2, INV_OBJECT_PICKUP11 },
		{ CombinePickupItem12, INV_OBJECT_PICKUP12_COMBO1, INV_OBJECT_PICKUP12_COMBO2, INV_OBJECT_PICKUP12 },
		{ CombinePickupItem13, INV_OBJECT_PICKUP13_COMBO1, INV_OBJECT_PICKUP13_COMBO2, INV_OBJECT_PICKUP13 },
		{ CombinePickupItem14, INV_OBJECT_PICKUP14_COMBO1, INV_OBJECT_PICKUP14_COMBO2, INV_OBJECT_PICKUP14 },
		{ CombinePickupItem15, INV_OBJECT_PICKUP15_COMBO1, INV_OBJECT_PICKUP15_COMBO2, INV_OBJECT_PICKUP15 },
		{ CombinePickupItem16, INV_OBJECT_PICKUP16_COMBO1, INV_OBJECT_PICKUP16_COMBO2, INV_OBJECT_PICKUP16 },
		{ CombineExamine1, INV_OBJECT_EXAMINE1_COMBO1, INV_OBJECT_EXAMINE1_COMBO2, INV_OBJECT_EXAMINE1 },
		{ CombineExamine2, INV_OBJECT_EXAMINE2_COMBO1, INV_OBJECT_EXAMINE2_COMBO2, INV_OBJECT_EXAMINE2 },
		{ CombineExamine3, INV_OBJECT_EXAMINE3_COMBO1, INV_OBJECT_EXAMINE3_COMBO2, INV_OBJECT_EXAMINE3 },
		{ CombineExamine4, INV_OBJECT_EXAMINE4_COMBO1, INV_OBJECT_EXAMINE4_COMBO2, INV_OBJECT_EXAMINE4 },
		{ CombineExamine5, INV_OBJECT_EXAMINE5_COMBO1, INV_OBJECT_EXAMINE5_COMBO2, INV_OBJECT_EXAMINE5 },
		{ CombineExamine6, INV_OBJECT_EXAMINE6_COMBO1, INV_OBJECT_EXAMINE6_COMBO2, INV_OBJECT_EXAMINE6 },
		{ CombineExamine7, INV_OBJECT_EXAMINE7_COMBO1, INV_OBJECT_EXAMINE7_COMBO2, INV_OBJECT_EXAMINE7 },
		{ CombineExamine8, INV_OBJECT_EXAMINE8_COMBO1, INV_OBJECT_EXAMINE8_COMBO2, INV_OBJECT_EXAMINE8 },
		{ CombineClockWorkBeetle, INV_OBJECT_BEETLE_PART1, INV_OBJECT_BEETLE_PART2, INV_OBJECT_BEETLE }
	};

	void CombineRevolverLasersight(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		if (flag)
		{
			lara->Inventory.HasLasersight = true;
			lara->Weapons[(int)LaraWeaponType::Revolver].HasLasersight = false;
		}
		else
		{
			lara->Inventory.HasLasersight = false;
			lara->Weapons[(int)LaraWeaponType::Revolver].HasLasersight = true;
		}

		if (lara->Control.HandStatus != HandStatus::Free &&
			lara->Control.Weapon.GunType == LaraWeaponType::Revolver)
		{
			UndrawPistolMeshRight(item, LaraWeaponType::Revolver);
			DrawPistolMeshes(item, LaraWeaponType::Revolver);
		}
	}

	void CombineCrossbowLasersight(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		if (flag)
		{
			lara->Inventory.HasLasersight = true;
			lara->Weapons[(int)LaraWeaponType::Crossbow].HasLasersight = false;
		}
		else
		{
			lara->Inventory.HasLasersight = false;
			lara->Weapons[(int)LaraWeaponType::Crossbow].HasLasersight = true;
		}

		if (lara->Control.HandStatus != HandStatus::Free &&
			lara->Control.Weapon.GunType == LaraWeaponType::Crossbow)
		{
			UndrawShotgunMeshes(item, LaraWeaponType::Crossbow);
			DrawShotgunMeshes(item, LaraWeaponType::Crossbow);
		}
	}

	void CombineHKSilencer(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		if (flag)
		{
			lara->Inventory.HasSilencer = true;
			lara->Weapons[(int)LaraWeaponType::HK].HasSilencer = false;
		}
		else
		{
			lara->Inventory.HasSilencer = false;
			lara->Weapons[(int)LaraWeaponType::HK].HasSilencer = true;
		}
	}

	void CombinePuzzleItem1(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[0] = false;
		lara->Inventory.PuzzlesCombo[1] = false;
		lara->Inventory.Puzzles[0] = true;
	}

	void CombinePuzzleItem2(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[2] = false;
		lara->Inventory.PuzzlesCombo[3] = false;
		lara->Inventory.Puzzles[1] = true;
	}

	void CombinePuzzleItem3(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[4] = false;
		lara->Inventory.PuzzlesCombo[5] = false;
		lara->Inventory.Puzzles[2] = true;
	}

	void CombinePuzzleItem4(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[6] = false;
		lara->Inventory.PuzzlesCombo[7] = false;
		lara->Inventory.Puzzles[3] = true;
	}

	void CombinePuzzleItem5(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[8] = false;
		lara->Inventory.PuzzlesCombo[9] = false;
		lara->Inventory.Puzzles[4] = true;
	}

	void CombinePuzzleItem6(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[10] = false;
		lara->Inventory.PuzzlesCombo[11] = false;
		lara->Inventory.Puzzles[5] = true;
	}

	void CombinePuzzleItem7(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[12] = false;
		lara->Inventory.PuzzlesCombo[13] = false;
		lara->Inventory.Puzzles[6] = true;
	}

	void CombinePuzzleItem8(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[14] = false;
		lara->Inventory.PuzzlesCombo[15] = false;
		lara->Inventory.Puzzles[7] = true;
	}

	void CombinePuzzleItem9(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[16] = false;
		lara->Inventory.PuzzlesCombo[17] = false;
		lara->Inventory.Puzzles[8] = true;
	}

	void CombinePuzzleItem10(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[18] = false;
		lara->Inventory.PuzzlesCombo[19] = false;
		lara->Inventory.Puzzles[9] = true;
	}

	void CombinePuzzleItem11(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[20] = false;
		lara->Inventory.PuzzlesCombo[21] = false;
		lara->Inventory.Puzzles[10] = true;
	}

	void CombinePuzzleItem12(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[22] = false;
		lara->Inventory.PuzzlesCombo[23] = false;
		lara->Inventory.Puzzles[11] = true;
	}

	void CombinePuzzleItem13(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[24] = false;
		lara->Inventory.PuzzlesCombo[25] = false;
		lara->Inventory.Puzzles[12] = true;
	}

	void CombinePuzzleItem14(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[26] = false;
		lara->Inventory.PuzzlesCombo[27] = false;
		lara->Inventory.Puzzles[13] = true;
	}

	void CombinePuzzleItem15(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[28] = false;
		lara->Inventory.PuzzlesCombo[29] = false;
		lara->Inventory.Puzzles[14] = true;
	}

	void CombinePuzzleItem16(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.PuzzlesCombo[30] = false;
		lara->Inventory.PuzzlesCombo[31] = false;
		lara->Inventory.Puzzles[15] = true;
	}

	void CombineKeyItem1(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[0] = true;
		lara->Inventory.KeysCombo[0] = false;
		lara->Inventory.KeysCombo[1] = false;
	}

	void CombineKeyItem2(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[1] = true;
		lara->Inventory.KeysCombo[2] = false;
		lara->Inventory.KeysCombo[3] = false;
	}

	void CombineKeyItem3(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[2] = true;
		lara->Inventory.KeysCombo[4] = false;
		lara->Inventory.KeysCombo[5] = false;
	}

	void CombineKeyItem4(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[3] = true;
		lara->Inventory.KeysCombo[6] = false;
		lara->Inventory.KeysCombo[7] = false;
	}

	void CombineKeyItem5(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[4] = true;
		lara->Inventory.KeysCombo[8] = false;
		lara->Inventory.KeysCombo[9] = false;
	}

	void CombineKeyItem6(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[5] = true;
		lara->Inventory.KeysCombo[10] = false;
		lara->Inventory.KeysCombo[11] = false;
	}

	void CombineKeyItem7(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[6] = true;
		lara->Inventory.KeysCombo[12] = false;
		lara->Inventory.KeysCombo[13] = false;
	}

	void CombineKeyItem8(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[7] = true;
		lara->Inventory.KeysCombo[14] = false;
		lara->Inventory.KeysCombo[15] = false;
	}

	void CombineKeyItem9(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[8] = true;
		lara->Inventory.KeysCombo[16] = false;
		lara->Inventory.KeysCombo[17] = false;
	}

	void CombineKeyItem10(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[9] = true;
		lara->Inventory.KeysCombo[18] = false;
		lara->Inventory.KeysCombo[19] = false;
	}

	void CombineKeyItem11(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[10] = true;
		lara->Inventory.KeysCombo[20] = false;
		lara->Inventory.KeysCombo[21] = false;
	}

	void CombineKeyItem12(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[11] = true;
		lara->Inventory.KeysCombo[22] = false;
		lara->Inventory.KeysCombo[23] = false;
	}

	void CombineKeyItem13(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[12] = true;
		lara->Inventory.KeysCombo[24] = false;
		lara->Inventory.KeysCombo[25] = false;
	}

	void CombineKeyItem14(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[13] = true;
		lara->Inventory.KeysCombo[26] = false;
		lara->Inventory.KeysCombo[27] = false;
	}

	void CombineKeyItem15(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[14] = true;
		lara->Inventory.KeysCombo[28] = false;
		lara->Inventory.KeysCombo[29] = false;
	}

	void CombineKeyItem16(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Keys[15] = true;
		lara->Inventory.KeysCombo[30] = false;
		lara->Inventory.KeysCombo[31] = false;
	}

	void CombinePickupItem1(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[0] = true;
		lara->Inventory.PickupsCombo[0] = false;
		lara->Inventory.PickupsCombo[1] = false;
	}

	void CombinePickupItem2(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[1] = true;
		lara->Inventory.PickupsCombo[2] = false;
		lara->Inventory.PickupsCombo[3] = false;
	}

	void CombinePickupItem3(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[2] = true;
		lara->Inventory.PickupsCombo[4] = false;
		lara->Inventory.PickupsCombo[5] = false;
	}

	void CombinePickupItem4(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[3] = true;
		lara->Inventory.PickupsCombo[6] = false;
		lara->Inventory.PickupsCombo[7] = false;
	}

	void CombinePickupItem5(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[4] = true;
		lara->Inventory.PickupsCombo[8] = false;
		lara->Inventory.PickupsCombo[9] = false;
	}

	void CombinePickupItem6(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[5] = true;
		lara->Inventory.PickupsCombo[10] = false;
		lara->Inventory.PickupsCombo[11] = false;
	}

	void CombinePickupItem7(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[6] = true;
		lara->Inventory.PickupsCombo[12] = false;
		lara->Inventory.PickupsCombo[13] = false;
	}

	void CombinePickupItem8(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[7] = true;
		lara->Inventory.PickupsCombo[14] = false;
		lara->Inventory.PickupsCombo[15] = false;
	}

	void CombinePickupItem9(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[8] = true;
		lara->Inventory.PickupsCombo[16] = false;
		lara->Inventory.PickupsCombo[17] = false;
	}

	void CombinePickupItem10(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[9] = true;
		lara->Inventory.PickupsCombo[18] = false;
		lara->Inventory.PickupsCombo[19] = false;
	}

	void CombinePickupItem11(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[10] = true;
		lara->Inventory.PickupsCombo[20] = false;
		lara->Inventory.PickupsCombo[21] = false;
	}

	void CombinePickupItem12(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[11] = true;
		lara->Inventory.PickupsCombo[22] = false;
		lara->Inventory.PickupsCombo[23] = false;
	}

	void CombinePickupItem13(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[12] = true;
		lara->Inventory.PickupsCombo[24] = false;
		lara->Inventory.PickupsCombo[25] = false;
	}

	void CombinePickupItem14(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[13] = true;
		lara->Inventory.PickupsCombo[26] = false;
		lara->Inventory.PickupsCombo[27] = false;
	}

	void CombinePickupItem15(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[14] = true;
		lara->Inventory.PickupsCombo[28] = false;
		lara->Inventory.PickupsCombo[29] = false;
	}

	void CombinePickupItem16(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Pickups[15] = true;
		lara->Inventory.PickupsCombo[30] = false;
		lara->Inventory.PickupsCombo[31] = false;
	}

	void CombineExamine1(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[0] = true;
		lara->Inventory.ExaminesCombo[0] = false;
		lara->Inventory.ExaminesCombo[1] = false;
	}

	void CombineExamine2(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[1] = true;
		lara->Inventory.ExaminesCombo[2] = false;
		lara->Inventory.ExaminesCombo[3] = false;
	}

	void CombineExamine3(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[2] = true;
		lara->Inventory.ExaminesCombo[4] = false;
		lara->Inventory.ExaminesCombo[5] = false;
	}

	void CombineExamine4(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[3] = true;
		lara->Inventory.ExaminesCombo[6] = false;
		lara->Inventory.ExaminesCombo[7] = false;
	}

	void CombineExamine5(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[4] = true;
		lara->Inventory.ExaminesCombo[8] = false;
		lara->Inventory.ExaminesCombo[9] = false;
	}

	void CombineExamine6(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[5] = true;
		lara->Inventory.ExaminesCombo[10] = false;
		lara->Inventory.ExaminesCombo[11] = false;
	}

	void CombineExamine7(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[6] = true;
		lara->Inventory.ExaminesCombo[12] = false;
		lara->Inventory.ExaminesCombo[13] = false;
	}

	void CombineExamine8(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.Examines[7] = true;
		lara->Inventory.ExaminesCombo[14] = false;
		lara->Inventory.ExaminesCombo[15] = false;
	}

	void CombineClockWorkBeetle(ItemInfo* item, bool flag)
	{
		auto* lara = GetLaraInfo(item);

		lara->Inventory.BeetleComponents |= BEETLECOMP_FLAG_BEETLE;  // Get beetle.
		lara->Inventory.BeetleComponents &= BEETLECOMP_FLAG_COMBO_1; // Remove combo 1.
		lara->Inventory.BeetleComponents &= BEETLECOMP_FLAG_COMBO_2; // Remove combo 2.
	}
}
