#include "framework.h"
#include "Game/Lara/PlayerStateMachine.h"

#include "Game/collision/collide_room.h"
#include "Game/items.h"
#include "Game/Lara/lara_basic.h"
#include "Game/Lara/lara_cheat.h"
#include "Game/Lara/lara_climb.h"
#include "Game/Lara/lara_collide.h"
#include "Game/Lara/lara_crawl.h"
#include "Game/Lara/lara_fire.h"
#include "Game/Lara/lara_hang.h"
#include "Game/Lara/lara_helpers.h"
#include "Game/Lara/lara_helpers.h"
#include "Game/Lara/lara_initialise.h"
#include "Game/Lara/lara_jump.h"
#include "Game/Lara/lara_monkey.h"
#include "Game/Lara/lara_objects.h"
#include "Game/Lara/lara_one_gun.h"
#include "Game/Lara/lara_overhang.h"
#include "Game/Lara/lara_slide.h"
#include "Game/Lara/lara_struct.h"
#include "Game/Lara/lara_surface.h"
#include "Game/Lara/lara_swim.h"
#include "Game/Lara/lara_tests.h"

using PlayerStateRoutine = std::function<void(ItemInfo* item, CollisionInfo* coll)>;

namespace TEN::Entities::Player
{
	void HandlePlayerStateControl(ItemInfo& playerItem, CollisionInfo& coll)
	{
		static const auto STATE_CONTROL_ROUTINE_MAP = std::unordered_map<int, PlayerStateRoutine>
		{
			{ LS_WALK_FORWARD, lara_as_walk_forward },
			{ LS_RUN_FORWARD, lara_as_run_forward },
			{ LS_IDLE, lara_as_idle },
			{ LS_JUMP_FORWARD, lara_as_jump_forward },
			{ LS_POSE, lara_as_pose },
			{ LS_RUN_BACK, lara_as_run_back },
			{ LS_TURN_RIGHT_SLOW, lara_as_turn_right_slow },
			{ LS_TURN_LEFT_SLOW, lara_as_turn_left_slow },
			{ LS_DEATH, lara_as_death },
			{ LS_FREEFALL, lara_as_freefall },
			{ LS_HANG, lara_as_hang },
			{ LS_REACH, lara_as_reach },
			{ LS_SPLAT, lara_as_splat },
			{ LS_UNDERWATER_IDLE, lara_as_underwater_idle },
			{ LS_GRAB_TO_FALL, lara_void_func },
			{ LS_JUMP_PREPARE, lara_as_jump_prepare },
			{ LS_WALK_BACK, lara_as_walk_back },
			{ LS_UNDERWATER_SWIM_FORWARD, lara_as_underwater_swim_forward },
			{ LS_UNDERWATER_INERTIA, lara_as_underwater_inertia },
			{ LS_GRABBING, lara_as_controlled_no_look },
			{ LS_TURN_RIGHT_FAST, lara_as_turn_right_fast },
			{ LS_STEP_RIGHT, lara_as_step_right },
			{ LS_STEP_LEFT, lara_as_step_left },
			{ LS_ROLL_180_BACKWARD, lara_as_roll_180_back },
			{ LS_SLIDE_FORWARD, lara_as_slide_forward },
			{ LS_JUMP_BACK, lara_as_jump_back },
			{ LS_JUMP_RIGHT, lara_as_jump_right },
			{ LS_JUMP_LEFT, lara_as_jump_left },
			{ LS_JUMP_UP, lara_as_jump_up },
			{ LS_FALL_BACK, lara_as_fall_back },
			{ LS_SHIMMY_LEFT, lara_as_shimmy_left },
			{ LS_SHIMMY_RIGHT, lara_as_shimmy_right },
			{ LS_SLIDE_BACK, lara_as_slide_back },
			{ LS_ONWATER_IDLE, lara_as_surface_idle },
			{ LS_ONWATER_FORWARD, lara_as_surface_swim_forward },
			{ LS_ONWATER_DIVE, lara_as_surface_dive },
			{ LS_PUSHABLE_PUSH, lara_as_pushable_push },
			{ LS_PUSHABLE_PULL, lara_as_pushable_pull },
			{ LS_PUSHABLE_GRAB, lara_as_pushable_grab },
			{ LS_PICKUP, lara_as_pickup },
			{ LS_SWITCH_DOWN, lara_as_switch_on },
			{ LS_SWITCH_UP, lara_as_switch_off },
			{ LS_INSERT_KEY, lara_as_use_key },
			{ LS_INSERT_PUZZLE, lara_as_use_puzzle },
			{ LS_WATER_DEATH, lara_as_underwater_death },
			{ LS_ROLL_180_FORWARD, lara_as_roll_180_forward },
			{ LS_BOULDER_DEATH, lara_as_special },
			{ LS_ONWATER_BACK, lara_as_surface_swim_back },
			{ LS_ONWATER_LEFT, lara_as_surface_swim_left },
			{ LS_ONWATER_RIGHT, lara_as_surface_swim_right },
			{ LS_USE_MIDAS, lara_void_func },
			{ LS_MIDAS_DEATH, lara_void_func },
			{ LS_SWAN_DIVE, lara_as_swan_dive },
			{ LS_FREEFALL_DIVE, lara_as_freefall_dive },
			{ LS_HANDSTAND, lara_as_handstand },
			{ LS_ONWATER_EXIT, lara_as_surface_climb_out },
			{ LS_LADDER_IDLE, lara_as_climb_idle },
			{ LS_LADDER_UP, lara_as_climb_up },
			{ LS_LADDER_LEFT, lara_as_climb_left },
			{ LS_LADDER_STOP, lara_as_climb_end },
			{ LS_LADDER_RIGHT, lara_as_climb_right },
			{ LS_LADDER_DOWN, lara_as_climb_down },
			{ LS_AUTO_JUMP, lara_as_auto_jump },
			{ LS_TEST_2, lara_void_func },
			{ LS_TEST_3, lara_void_func },
			{ LS_WADE_FORWARD, lara_as_wade_forward },
			{ LS_UNDERWATER_ROLL, lara_as_underwater_roll_180 },
			{ LS_PICKUP_FLARE, lara_as_pickup_flare },
			{ LS_JUMP_ROLL_180, lara_void_func },
			{ LS_KICK, lara_void_func },
			{ LS_ZIP_LINE, lara_as_zip_line },
			{ LS_CROUCH_IDLE, lara_as_crouch_idle },
			{ LS_CROUCH_ROLL, lara_as_crouch_roll },
			{ LS_SPRINT, lara_as_sprint },
			{ LS_SPRINT_DIVE, lara_as_sprint_dive },
			{ LS_MONKEY_IDLE, lara_as_monkey_idle },
			{ LS_MONKEY_FORWARD, lara_as_monkey_forward },
			{ LS_MONKEY_SHIMMY_LEFT, lara_as_monkey_shimmy_left },
			{ LS_MONKEY_SHIMMY_RIGHT, lara_as_monkey_shimmy_right },
			{ LS_MONKEY_TURN_180, lara_as_monkey_turn_180 },
			{ LS_CRAWL_IDLE, lara_as_crawl_idle },
			{ LS_CRAWL_FORWARD, lara_as_crawl_forward },
			{ LS_MONKEY_TURN_LEFT, lara_as_monkey_turn_left },
			{ LS_MONKEY_TURN_RIGHT, lara_as_monkey_turn_right },
			{ LS_CRAWL_TURN_LEFT, lara_as_crawl_turn_left },
			{ LS_CRAWL_TURN_RIGHT, lara_as_crawl_turn_right },
			{ LS_CRAWL_BACK, lara_as_crawl_back },
			{ LS_HANG_TO_CRAWL, lara_as_controlled_no_look },
			{ LS_CRAWL_TO_HANG, lara_as_controlled_no_look },
			{ LS_MISC_CONTROL, lara_as_controlled },
			{ LS_ROPE_TURN_CLOCKWISE, lara_as_rope_turn_clockwise },
			{ LS_ROPE_TURN_COUNTER_CLOCKWISE, lara_as_rope_turn_counter_clockwise },
			{ LS_GIANT_BUTTON_PUSH, lara_as_controlled },
			{ LS_TRAPDOOR_FLOOR_OPEN, lara_as_controlled },
			{ LS_FREEFALL_BIS, lara_as_controlled },
			{ LS_ROUND_HANDLE, lara_as_controlled_no_look },
			{ LS_COGWHEEL, lara_as_controlled_no_look },
			{ LS_LEVERSWITCH_PUSH, lara_as_controlled },
			{ LS_HOLE, lara_as_pickup },
			{ LS_POLE_IDLE, lara_as_pole_idle },
			{ LS_POLE_UP, lara_as_pole_up },
			{ LS_POLE_DOWN, lara_as_pole_down },
			{ LS_POLE_TURN_CLOCKWISE, lara_as_pole_turn_clockwise },
			{ LS_POLE_TURN_COUNTER_CLOCKWISE, lara_as_pole_turn_counter_clockwise },
			{ LS_PULLEY, lara_as_pulley },
			{ LS_CROUCH_TURN_LEFT, lara_as_crouch_turn_left },
			{ LS_CROUCH_TURN_RIGHT, lara_as_crouch_turn_right },
			{ LS_SHIMMY_OUTER_LEFT, lara_as_shimmy_corner },
			{ LS_SHIMMY_OUTER_RIGHT, lara_as_shimmy_corner },
			{ LS_SHIMMY_INNER_LEFT, lara_as_shimmy_corner },
			{ LS_SHIMMY_INNER_RIGHT, lara_as_shimmy_corner },
			{ LS_ROPE_IDLE, lara_as_rope_idle },
			{ LS_ROPE_UP, lara_as_rope_up },
			{ LS_ROPE_DOWN, lara_as_rope_down },
			{ LS_ROPE_SWING, lara_as_rope_idle },
			{ LS_ROPE_UNKNOWN, lara_as_rope_idle },
			{ LS_CORRECT_POSITION, lara_void_func },
			{ LS_DOUBLEDOOR_PUSH, lara_as_controlled },
			{ LS_DOZY, lara_as_swimcheat },
			{ LS_TIGHTROPE_IDLE, lara_as_tightrope_idle },
			{ LS_TIGHTROPE_TURN_180, lara_as_controlled_no_look },
			{ LS_TIGHTROPE_WALK, lara_as_tightrope_walk },
			{ LS_TIGHTROPE_UNBALANCE_LEFT, lara_as_tightrope_fall },
			{ LS_TIGHTROPE_UNBALANCE_RIGHT, lara_as_tightrope_fall },
			{ LS_TIGHTROPE_ENTER, lara_as_null },
			{ LS_TIGHTROPE_DISMOUNT, lara_as_tightrope_dismount },
			{ LS_DOVE_SWITCH, lara_as_switch_on },
			{ LS_TIGHTROPE_RECOVER_BALANCE, lara_as_null },
			{ LS_HORIZONTAL_BAR_SWING, lara_as_horizontal_bar_swing },
			{ LS_HORIZONTAL_BAR_LEAP, lara_as_horizontal_bar_leap },
			{ LS_UNKNOWN_1, lara_as_null },
			{ LS_RADIO_LISTENING, lara_as_controlled_no_look },
			{ LS_RADIO_OFF, lara_as_controlled_no_look },
			{ LS_UNKNOWN_2, lara_as_null },
			{ LS_UNKNOWN_3, lara_as_null },
			{ LS_UNKNOWN_4, lara_as_null },
			{ LS_UNKNOWN_5, lara_as_null },
			{ LS_PICKUP_FROM_CHEST, lara_as_null },
			{ LS_LADDER_TO_CROUCH, lara_as_null },
			{ LS_SHIMMY_45_OUTER_LEFT, lara_as_null },
			{ LS_SHIMMY_45_OUTER_RIGHT, lara_as_null },
			{ LS_SHIMMY_45_INNER_LEFT, lara_as_null },
			{ LS_SHIMMY_45_INNER_RIGHT, lara_as_null },
			{ LS_SLOPE_CLIMB_IDLE, lara_as_slopeclimb },
			{ LS_SLOPE_CLIMB_UP, lara_as_slopeclimbup },
			{ LS_SLOPE_CLIMB_DOWN, lara_as_slopeclimbdown },
			{ LS_COGWHEEL_UNGRAB, lara_as_controlled_no_look },
			{ LS_STEP_UP, lara_as_null },
			{ LS_STEP_DOWN, lara_as_null },
			{ LS_SLOPE_CLIMB_FALL, lara_as_slopefall },
			{ LS_LADDER_DISMOUNT_LEFT, lara_as_climb_stepoff_left },
			{ LS_LADDER_DISMOUNT_RIGHT, lara_as_climb_stepoff_right },
			{ LS_TURN_LEFT_FAST, lara_as_turn_left_fast },
			{ LS_CRAWL_EXIT_STEP_DOWN, lara_as_controlled },
			{ LS_CRAWL_EXIT_JUMP, lara_as_controlled },
			{ LS_CRAWL_EXIT_FLIP, lara_as_controlled },
			{ LS_SLOPE_CLIMB_HANG, lara_as_slopehang },
			{ LS_SLOPE_CLIMB_SHIMMY, lara_as_slopeshimmy },
			{ LS_SLOPE_CLIMB_START, lara_as_sclimbstart },
			{ LS_SLOPE_CLIMB_STOP, lara_as_sclimbstop },
			{ LS_SLOPE_CLIMB_END, lara_as_sclimbend },
			{ LS_CRAWL_STEP_UP, lara_as_null },
			{ LS_CRAWL_STEP_DOWN, lara_as_null },
			{ LS_MONKEY_BACK, lara_as_monkey_back },
			{ LS_VAULT, lara_as_vault },
			{ LS_VAULT_2_STEPS, lara_as_vault },
			{ LS_VAULT_3_STEPS, lara_as_vault },
			{ LS_VAULT_1_STEP_CROUCH, lara_as_vault },
			{ LS_VAULT_2_STEPS_CROUCH, lara_as_vault },
			{ LS_VAULT_3_STEPS_CROUCH, lara_as_vault },
			{ LS_SOFT_SPLAT, lara_as_idle },
			{ LS_CROUCH_TURN_180, lara_as_crouch_turn_180 },
			{ LS_CRAWL_TURN_180, lara_as_crawl_turn_180 },
			{ LS_TURN_180, lara_as_turn_180 },

			// Reserved for ladder object.
			{ 174, lara_as_null },
			{ 175, lara_as_null },
			{ 176, lara_as_null },
			{ 177, lara_as_null },
			{ 178, lara_as_null },
			{ 179, lara_as_null },
			{ 180, lara_as_null },
			{ 181, lara_as_null },
			{ 182, lara_as_null },
			{ 183, lara_as_null },
			{ 184, lara_as_null },
			{ 185, lara_as_null },
			{ 186, lara_as_null },
			{ 187, lara_as_null },
			{ 188, lara_as_null },

			{ LS_REMOVE_PUZZLE, lara_as_use_puzzle },
			{ LS_RESERVED_PUSHABLE_STATE, lara_as_null },
			{ LS_SPRINT_SLIDE, lara_as_sprint_slide }
		};

		// Find state control routine.
		auto it = STATE_CONTROL_ROUTINE_MAP.find(playerItem.Animation.ActiveState);
		if (it == STATE_CONTROL_ROUTINE_MAP.end())
		{
			TENLog(
				"Error handling missing player state control routine for state " + std::to_string(playerItem.Animation.ActiveState),
				LogLevel::Warning);
			return;
		}

		// Handle state control.
		const auto& stateControlRoutine = it->second;
		stateControlRoutine(&playerItem, &coll);
	}

	void HandlePlayerStateCollision(ItemInfo& playerItem, CollisionInfo& coll)
	{
		static const auto STATE_COLLISION_ROUTINE_MAP = std::unordered_map<int, PlayerStateRoutine>
		{
			{ LS_WALK_FORWARD, lara_col_walk_forward },
			{ LS_RUN_FORWARD, lara_col_run_forward },
			{ LS_IDLE, lara_col_idle },
			{ LS_JUMP_FORWARD, lara_col_jump_forward },
			{ LS_POSE, lara_col_idle },
			{ LS_RUN_BACK, lara_col_run_back },
			{ LS_TURN_RIGHT_SLOW, lara_col_turn_right_slow },
			{ LS_TURN_LEFT_SLOW, lara_col_turn_left_slow },
			{ LS_DEATH, lara_col_death },
			{ LS_FREEFALL, lara_col_freefall },
			{ LS_HANG, lara_col_hang },
			{ LS_REACH, lara_col_reach },
			{ LS_SPLAT, lara_col_splat },
			{ LS_UNDERWATER_IDLE, lara_col_underwater_idle },
			{ LS_GRAB_TO_FALL, lara_col_land },
			{ LS_JUMP_PREPARE, lara_col_jump_prepare },
			{ LS_WALK_BACK, lara_col_walk_back },
			{ LS_UNDERWATER_SWIM_FORWARD, lara_col_underwater_swim_forward },
			{ LS_UNDERWATER_INERTIA, lara_col_underwater_inertia },
			{ LS_GRABBING, lara_default_col },
			{ LS_TURN_RIGHT_FAST, lara_col_turn_right_fast },
			{ LS_STEP_RIGHT, lara_col_step_right },
			{ LS_STEP_LEFT, lara_col_step_left },
			{ LS_ROLL_180_BACKWARD, lara_col_roll_180_back },
			{ LS_SLIDE_FORWARD, lara_col_slide_forward },
			{ LS_JUMP_BACK, lara_col_jump_back },
			{ LS_JUMP_RIGHT, lara_col_jump_right },
			{ LS_JUMP_LEFT, lara_col_jump_left },
			{ LS_JUMP_UP, lara_col_jump_up },
			{ LS_FALL_BACK, lara_col_fall_back },
			{ LS_SHIMMY_LEFT, lara_col_shimmy_left },
			{ LS_SHIMMY_RIGHT, lara_col_shimmy_right },
			{ LS_SLIDE_BACK, lara_col_slide_back },
			{ LS_ONWATER_IDLE, lara_col_surface_idle },
			{ LS_ONWATER_FORWARD, lara_col_surface_swim_forward },
			{ LS_ONWATER_DIVE, lara_col_surface_dive },
			{ LS_PUSHABLE_PUSH, lara_default_col },
			{ LS_PUSHABLE_PULL, lara_default_col },
			{ LS_PUSHABLE_GRAB, lara_default_col },
			{ LS_PICKUP, lara_default_col },
			{ LS_SWITCH_DOWN, lara_default_col },
			{ LS_SWITCH_UP, lara_default_col },
			{ LS_INSERT_KEY, lara_default_col },
			{ LS_INSERT_PUZZLE, lara_default_col },
			{ LS_WATER_DEATH, lara_col_underwater_death },
			{ LS_ROLL_180_FORWARD, lara_col_roll_180_forward },
			{ LS_BOULDER_DEATH, lara_void_func },
			{ LS_ONWATER_BACK, lara_col_surface_swim_back },
			{ LS_ONWATER_LEFT, lara_col_surface_swim_left },
			{ LS_ONWATER_RIGHT, lara_col_surface_swim_right },
			{ LS_USE_MIDAS, lara_void_func },
			{ LS_MIDAS_DEATH, lara_void_func },
			{ LS_SWAN_DIVE, lara_col_swan_dive },
			{ LS_FREEFALL_DIVE, lara_col_freefall_dive },
			{ LS_HANDSTAND, lara_default_col },
			{ LS_ONWATER_EXIT, lara_default_col },
			{ LS_LADDER_IDLE, lara_col_climb_idle },
			{ LS_LADDER_UP, lara_col_climb_up },
			{ LS_LADDER_LEFT, lara_col_climb_left },
			{ LS_LADDER_STOP, lara_col_climb_end },
			{ LS_LADDER_RIGHT, lara_col_climb_right },
			{ LS_LADDER_DOWN, lara_col_climb_down },
			{ LS_AUTO_JUMP, lara_col_jump_prepare },
			{ LS_TEST_2, lara_void_func },
			{ LS_TEST_3, lara_void_func },
			{ LS_WADE_FORWARD, lara_col_wade_forward },
			{ LS_UNDERWATER_ROLL, lara_col_underwater_roll_180 },
			{ LS_PICKUP_FLARE, lara_default_col },
			{ LS_JUMP_ROLL_180, lara_void_func },
			{ LS_KICK, lara_void_func },
			{ LS_ZIP_LINE, lara_void_func },
			{ LS_CROUCH_IDLE, lara_col_crouch_idle },
			{ LS_CROUCH_ROLL, lara_col_crouch_roll },
			{ LS_SPRINT, lara_col_sprint },
			{ LS_SPRINT_DIVE, lara_col_sprint_dive },
			{ LS_MONKEY_IDLE, lara_col_monkey_idle },
			{ LS_MONKEY_FORWARD, lara_col_monkey_forward },
			{ LS_MONKEY_SHIMMY_LEFT, lara_col_monkey_shimmy_left },
			{ LS_MONKEY_SHIMMY_RIGHT, lara_col_monkey_shimmy_right },
			{ LS_MONKEY_TURN_180, lara_col_monkey_turn_180 },
			{ LS_CRAWL_IDLE, lara_col_crawl_idle },
			{ LS_CRAWL_FORWARD, lara_col_crawl_forward },
			{ LS_MONKEY_TURN_LEFT, lara_col_monkey_turn_left },
			{ LS_MONKEY_TURN_RIGHT, lara_col_monkey_turn_right },
			{ LS_CRAWL_TURN_LEFT, lara_col_crawl_turn_left },
			{ LS_CRAWL_TURN_RIGHT, lara_col_crawl_turn_right },
			{ LS_CRAWL_BACK, lara_col_crawl_back },
			{ LS_HANG_TO_CRAWL, lara_void_func },
			{ LS_CRAWL_TO_HANG, lara_col_crawl_to_hang },
			{ LS_MISC_CONTROL, lara_default_col },
			{ LS_ROPE_TURN_CLOCKWISE, lara_void_func },
			{ LS_ROPE_TURN_COUNTER_CLOCKWISE, lara_void_func },
			{ LS_GIANT_BUTTON_PUSH, lara_default_col },
			{ LS_TRAPDOOR_FLOOR_OPEN, lara_void_func },
			{ LS_FREEFALL_BIS, lara_void_func },
			{ LS_ROUND_HANDLE, lara_col_turn_switch },
			{ LS_COGWHEEL, lara_void_func },
			{ LS_LEVERSWITCH_PUSH, lara_void_func },
			{ LS_HOLE, lara_default_col },
			{ LS_POLE_IDLE, lara_col_pole_idle },
			{ LS_POLE_UP, lara_col_pole_up },
			{ LS_POLE_DOWN, lara_col_pole_down },
			{ LS_POLE_TURN_CLOCKWISE, lara_col_pole_turn_clockwise },
			{ LS_POLE_TURN_COUNTER_CLOCKWISE, lara_col_pole_turn_counter_clockwise },
			{ LS_PULLEY, lara_default_col },
			{ LS_CROUCH_TURN_LEFT, lara_col_crouch_turn_left },
			{ LS_CROUCH_TURN_RIGHT, lara_col_crouch_turn_right },
			{ LS_SHIMMY_OUTER_LEFT, lara_as_null },
			{ LS_SHIMMY_OUTER_RIGHT, lara_as_null },
			{ LS_SHIMMY_INNER_LEFT, lara_as_null },
			{ LS_SHIMMY_INNER_RIGHT, lara_as_null },
			{ LS_ROPE_IDLE, lara_col_rope_idle },
			{ LS_ROPE_UP, lara_void_func },
			{ LS_ROPE_DOWN, lara_void_func },
			{ LS_ROPE_SWING, lara_col_rope_swing },
			{ LS_ROPE_UNKNOWN, lara_col_rope_swing },
			{ LS_CORRECT_POSITION, lara_void_func },
			{ LS_DOUBLEDOOR_PUSH, lara_void_func },
			{ LS_DOZY, lara_col_underwater_swim_forward },
			{ LS_TIGHTROPE_IDLE, lara_default_col },
			{ LS_TIGHTROPE_TURN_180, lara_default_col },
			{ LS_TIGHTROPE_WALK, lara_default_col },
			{ LS_TIGHTROPE_UNBALANCE_LEFT, lara_default_col },
			{ LS_TIGHTROPE_UNBALANCE_RIGHT, lara_default_col },
			{ LS_TIGHTROPE_ENTER, lara_default_col },
			{ LS_TIGHTROPE_DISMOUNT, lara_default_col },
			{ LS_DOVE_SWITCH, lara_default_col },
			{ LS_TIGHTROPE_RECOVER_BALANCE, lara_default_col },
			{ LS_HORIZONTAL_BAR_SWING, lara_default_col },
			{ LS_HORIZONTAL_BAR_LEAP, lara_default_col },
			{ LS_UNKNOWN_1, lara_void_func },
			{ LS_RADIO_LISTENING, lara_void_func },
			{ LS_RADIO_OFF, lara_void_func },
			{ LS_UNKNOWN_2, lara_void_func },
			{ LS_UNKNOWN_3, lara_void_func },
			{ LS_UNKNOWN_4, lara_void_func },
			{ LS_UNKNOWN_5, lara_void_func },
			{ LS_PICKUP_FROM_CHEST, lara_void_func },
			{ LS_LADDER_TO_CROUCH, lara_void_func },
			{ LS_SHIMMY_45_OUTER_LEFT, lara_void_func },
			{ LS_SHIMMY_45_OUTER_RIGHT, lara_void_func },
			{ LS_SHIMMY_45_INNER_LEFT, lara_void_func },
			{ LS_SHIMMY_45_INNER_RIGHT, lara_void_func },
			{ LS_SLOPE_CLIMB_IDLE, lara_col_slopeclimb },
			{ LS_SLOPE_CLIMB_UP, lara_default_col },
			{ LS_SLOPE_CLIMB_DOWN, lara_default_col },
			{ LS_COGWHEEL_UNGRAB, lara_void_func },
			{ LS_STEP_UP, lara_void_func },
			{ LS_STEP_DOWN, lara_void_func },
			{ LS_SLOPE_CLIMB_FALL, lara_default_col },
			{ LS_LADDER_DISMOUNT_LEFT, lara_default_col },
			{ LS_LADDER_DISMOUNT_RIGHT, lara_default_col },
			{ LS_TURN_LEFT_FAST, lara_col_turn_left_fast },
			{ LS_CRAWL_EXIT_STEP_DOWN, lara_default_col },
			{ LS_CRAWL_EXIT_JUMP, lara_default_col },
			{ LS_CRAWL_EXIT_FLIP, lara_default_col },
			{ LS_SLOPE_CLIMB_HANG, lara_col_slopehang },
			{ LS_SLOPE_CLIMB_SHIMMY, lara_col_slopeshimmy },
			{ LS_SLOPE_CLIMB_START, lara_default_col },
			{ LS_SLOPE_CLIMB_STOP, lara_default_col },
			{ LS_SLOPE_CLIMB_END, lara_default_col },
			{ LS_CRAWL_STEP_UP, lara_void_func },
			{ LS_CRAWL_STEP_DOWN, lara_void_func },
			{ LS_MONKEY_BACK, lara_col_monkey_back },
			{ LS_VAULT, lara_void_func },
			{ LS_VAULT_2_STEPS, lara_void_func },
			{ LS_VAULT_3_STEPS, lara_void_func },
			{ LS_VAULT_1_STEP_CROUCH, lara_void_func },
			{ LS_VAULT_2_STEPS_CROUCH, lara_void_func },
			{ LS_VAULT_3_STEPS_CROUCH, lara_void_func },
			{ LS_SOFT_SPLAT, lara_col_idle },
			{ LS_CROUCH_TURN_180, lara_col_crouch_turn_180 },
			{ LS_CRAWL_TURN_180, lara_col_crawl_turn_180 },
			{ LS_TURN_180, lara_col_turn_180 },

			// Reserved for ladder object.
			{ 174, lara_void_func },
			{ 175, lara_void_func },
			{ 176, lara_void_func },
			{ 177, lara_void_func },
			{ 178, lara_void_func },
			{ 179, lara_void_func },
			{ 180, lara_void_func },
			{ 181, lara_void_func },
			{ 182, lara_void_func },
			{ 183, lara_void_func },
			{ 184, lara_void_func },
			{ 185, lara_void_func },
			{ 186, lara_void_func },
			{ 187, lara_void_func },
			{ 188, lara_void_func },

			{ LS_REMOVE_PUZZLE, lara_default_col },
			{ LS_RESERVED_PUSHABLE_STATE, lara_void_func },
			{ LS_SPRINT_SLIDE, lara_col_sprint_slide }
		};

		// Find state collision routine.
		auto it = STATE_COLLISION_ROUTINE_MAP.find(playerItem.Animation.ActiveState);
		if (it == STATE_COLLISION_ROUTINE_MAP.end())
		{
			TENLog(
				"Error handling missing player state collision routine for state " + std::to_string(playerItem.Animation.ActiveState),
				LogLevel::Warning);
			return;
		}

		// Handle state collision.
		const auto& stateCollisionRoutine = it->second;
		stateCollisionRoutine(&playerItem, &coll);
	}
}
